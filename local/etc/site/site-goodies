#! /bin/false
# (This file should be *sourced*, not executed.)
#
# Powerful plugin-extendible shell startup script
#
# Source this file from your .bashrc if you like the features provided by it.
# (This may also be done globally for all users by the administrator.)


# This script is intended to be sourced from within "${HOME}.bashrc" (and,
# indirectly, also from "${HOME}/.bash_profile").
#
# It operates in a simple yet powerful because highly extendible way:
#
# * For setup shell code to be always executed, it sources the contents of the
#   "/usr/local/etc/site/bashrc_always_presets" directory first. This contains
#   system-wide presets. Then it also sources either the contents of file
#   "${HOME}/.bashrc_always" (if it exists and is a file). Or, if
#   "${HOME}/.bashrc_always" exists and is a directory, all regular files in
#   this directory will be sourced as setup-scripts in alphabetical order.
#
# * For setup shell code that only makes sense for interactive shells, such as
#   "alias", it subsequently sources the contents of the
#   "/usr/local/etc/site/bashrc_interactive_presets" directory for such
#   interactive shells. This contains system-wide presets. Then it also
#   sources either the contents of file "${HOME}/.bashrc_interactive" (if it
#   exists and is a file). Or, if "${HOME}/.bashrc_interactive" exists and is
#   a directory, all regular files in this directory will be sourced as
#   setup-scripts in alphabetical order.
#
# * Although the actual shell snippets to be sourced can be script files with
#   arbitrary contents, there are two template directories containing useful
#   pre-canned snippets which can be symlinked directly. Look in
#   "/usr/local/etc/site/bashrc_always-templates" for snippets to be symlinked
#   into "${HOME}/.bashrc_always", or look in
#   "/usr/local/etc/site/bashrc_interactive-templates" for snippets to be
#   symlinked into "${HOME}/.bashrc_interactive".
#
# This script can also be manually sourced; in this case the option -v can
# also be specified for verbose operation. Useful for debugging.

warn_p96zf6unm4ijvvxw5a678k0dy() {
	echo "WARNING: $*!" >& 2
}

include_file_p96zf6unm4ijvvxw5a678k0dy() {
	test "$OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy" \
		&& echo "Including startup-plugin file '$1'."
	. "$1" \
		|| warn_p96zf6unm4ijvvxw5a678k0dy \
			"Startup-plugin \"$1\" returned $?"
}

include_dir_p96zf6unm4ijvvxw5a678k0dy() {
	local FILE_p96zf6unm4ijvvxw5a678k0dy
	test "$OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy" \
		&& echo "Including startup-plugin directory '$1'."
	for FILE_p96zf6unm4ijvvxw5a678k0dy in $1/*; do
		if test x`
			printf '%s\n' "$FILE_p96zf6unm4ijvvxw5a678k0dy" \
				| sed -e '\,\.[^./][^./]*$,p;d' \
				| wc -l
		` = x0; then
			test -f "$FILE_p96zf6unm4ijvvxw5a678k0dy" \
				&& include_file_p96zf6unm4ijvvxw5a678k0dy \
					"$FILE_p96zf6unm4ijvvxw5a678k0dy"
		fi
	done
}

include_system_plugins_p96zf6unm4ijvvxw5a678k0dy(){
	local INC_DIR_p96zf6unm4ijvvxw5a678k0dy
	INC_DIR_p96zf6unm4ijvvxw5a678k0dy=/usr/local/etc/site/$1
	test -d "$INC_DIR_p96zf6unm4ijvvxw5a678k0dy" || {
		warn_p96zf6unm4ijvvxw5a678k0dy \
			"Missing directory" \
			"\"$INC_DIR_p96zf6unm4ijvvxw5a678k0dy\""
		return
	}
	include_dir_p96zf6unm4ijvvxw5a678k0dy \
		"$INC_DIR_p96zf6unm4ijvvxw5a678k0dy"
}

include_user_plugins_p96zf6unm4ijvvxw5a678k0dy() {
	test -n "$HOME" || return
	local INC_p96zf6unm4ijvvxw5a678k0dy
	INC_p96zf6unm4ijvvxw5a678k0dy=$HOME/$1
	test -e "$INC_p96zf6unm4ijvvxw5a678k0dy" || return
	test -f "$INC_p96zf6unm4ijvvxw5a678k0dy" && {
		include_file_p96zf6unm4ijvvxw5a678k0dy \
			"$INC_p96zf6unm4ijvvxw5a678k0dy"
		return
	}
	test -d "$INC_p96zf6unm4ijvvxw5a678k0dy" && {
		include_dir_p96zf6unm4ijvvxw5a678k0dy \
			"$INC_p96zf6unm4ijvvxw5a678k0dy"
		return
	}
	warn_p96zf6unm4ijvvxw5a678k0dy \
		"Cannot process " \
		"\"$INC_p96zf6unm4ijvvxw5a678k0dy\" for shell startup"
}

cleanup_most_p96zf6unm4ijvvxw5a678k0dy() {
	# Cleans up everything but itself.
	unset OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy \
		NEXT_OPT_p96zf6unm4ijvvxw5a678k0dy
	unset -f warn_p96zf6unm4ijvvxw5a678k0dy \
		include_file_p96zf6unm4ijvvxw5a678k0dy \
		include_dir_p96zf6unm4ijvvxw5a678k0dy \
		include_system_plugins_p96zf6unm4ijvvxw5a678k0dy \
		include_user_plugins_p96zf6unm4ijvvxw5a678k0dy
	OPTIND=1
}

OPTIND=1
OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy=
while getopts v NEXT_OPT_p96zf6unm4ijvvxw5a678k0dy; do
	case $NEXT_OPT_p96zf6unm4ijvvxw5a678k0dy in
		v) OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy=1;;
		*)
			cleanup_most_p96zf6unm4ijvvxw5a678k0dy
			unset -f cleanup_most_p96zf6unm4ijvvxw5a678k0dy
			echo "Terminating."
			return 1
	esac
done

# Source goodies to be used always.
include_system_plugins_p96zf6unm4ijvvxw5a678k0dy "bashrc_always-presets"

# Useful user macros for every case.
include_user_plugins_p96zf6unm4ijvvxw5a678k0dy ".bashrc_always"

if test x"${-%i*}" = x"$-"; then
	# Shell is non-interactive. All done.
	test "$OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy" \
		&& echo "Shell is non-interactive."
	cleanup_most_p96zf6unm4ijvvxw5a678k0dy
	unset -f cleanup_most_p96zf6unm4ijvvxw5a678k0dy
	return
fi

test "$OPT_VERBOSE_p96zf6unm4ijvvxw5a678k0dy" && echo "Shell is Interactive."

# Source goodies to be used only for interactive shells.
include_system_plugins_p96zf6unm4ijvvxw5a678k0dy "bashrc_interactive-presets"

# Finally, allow the user to overwrite all those settings!
include_user_plugins_p96zf6unm4ijvvxw5a678k0dy ".bashrc_interactive"

cleanup_most_p96zf6unm4ijvvxw5a678k0dy
unset -f cleanup_most_p96zf6unm4ijvvxw5a678k0dy
