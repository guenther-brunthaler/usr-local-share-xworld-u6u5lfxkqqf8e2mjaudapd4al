#! /bin/false
# Customized compiler settings.
# 'source' it from your shell; do not just execute.


die_nkhzp79chfabpqyh7e7pa8maf() {
	echo "ERROR: $@" >& 2
	false || exit
}


# Returns true if version string $1 refers to
# a greater/equal version than version string $2.
version_ge_nkhzp79chfabpqyh7e7pa8maf() {
	local o1 o2 p1 s1 p2 s2
	o1=$1 o2=$2
	while :
	do
		p1=${o1%%.*} p2=${o2%%.*}
		s1="" s2=""
		test x"$p1" = x"$o1" || s1=${o1#*.}
		test x"$p2" = x"$o2" || s2=${o2#*.}
		if test "$p1" -ne "$p2"
		then
			test "$p1" -gt "$p2"
			return
		fi
		test -z "$s2" && return
		test -n "$s1" || return
		o1=$s1 o2=$s2
	done
}


# $1: Item to ask for.
# Returns true for "Yes". Default is "No".
# Uses always default for non-interactive shells without prompting.
want_nkhzp79chfabpqyh7e7pa8maf() {
	local REPLY
	case $- in
		*i*)
			read -p "Do you want $1 (y/N)? " -t 10 REPLY \
				|| REPLY=n
	esac
	test -z "$REPLY" && REPLY=n
	REPLY="${REPLY%${REPLY#?}}"
	if test x"$REPLY" = x"N" || test x"$REPLY" = x"n"
	then
		echo "Not using $1."
		REPLY=1
	else
		echo "Using $1."
		REPLY=0
	fi
	return $REPLY
}


# Arguments: Options (with leading dashes) followed by source lines.
# Normally, return value indicates whether source compiles fine.
# Options prefixed by "?" are special: If source compiles without them,
# returns FALSE; if source compiles with them returns TRUE.
testcode_nkhzp79chfabpqyh7e7pa8maf() {
	local OPT TOPT
	OPT= TOPT=
	while :
	do
		case $1 in
			-*) OPT=$OPT${OPT:+ }$1;;
			"?"-*) TOPT=$TOPT${TOPT:+ }${1#?};;
			*) break
		esac
		shift
	done
	local SRC I OUT RC
	I=1
	while :
	do
		SRC="/tmp/conftest_${$}_$I.c"
		test ! -e "$SRC" && break
		I=`expr $I + 1`
	done
	I=1
	while :
	do
		OUT="/tmp/conftest_${$}_$I.o"
		test ! -e "$OUT" && break
		I=`expr $I + 1`
	done
	while test $# -gt 0
	do
		printf '%s\n' "$1"
		shift
	done > "$SRC"
	set gcc $OPT -c
	"$@" -o "$OUT" "$SRC" > /dev/null 2>& 1
	RC=$?
	test $RC = 0 && rm "$OUT"
	if test -n "$TOPT"
	then
		test $RC != 0; RC=$?
		if test $RC = 0
		then
			if
				I=$*
				set gcc $OPT $TOPT -c
				"$@" -o "$OUT" "$SRC" > /dev/null 2>& 1
			then
				rm "$OUT"
			else
				echo "ERROR: The following code neither" \
					"compiles with '$I' nor with '$@':"
				cat "$SRC"
				echo
				echo "Find an option to fix this before" \
					"proceeding!"
			fi >& 2
		fi
	fi
	rm "$SRC"
	return $RC;
}


GCC_VERSION="`gcc --version | head -n 1 | cut -d' ' -f3`"
if test -z "$GCC_VERSION"
then
	die_nkhzp79chfabpqyh7e7pa8maf "Cannot determine GCC version!"
fi
OLD_IFS="$IFS"
IFS=$'\n'
for CPU_ID in `
	awk -F '\t*: *' -- '
		$1=="vendor_id"	{vendor=$2}
		$1=="cpu family" {cpu=$2}
		$1=="model" {model=$2}
		$1=="stepping" {stepping=$2}
		END {
			print vendor, cpu, model;
			print vendor, cpu, model, stepping;
		}
	' /proc/cpuinfo
`
do
	case $CPU_ID in
		# Lookup from http://en.gentoo-wiki.com/wiki/Safe_Cflags
		# /proc/cpuid: <vendor_id> <cpu family> <model> [ <stepping> ]
		"AuthenticAMD 15 47") CPU_ARCH=athlon64;;
		"AuthenticAMD 16 2") CPU_ARCH=amdfam10;;
		"AuthenticAMD 6 4") CPU_ARCH=athlon-tbird;;
		"AuthenticAMD 6 6") CPU_ARCH=athlon-xp;;
		"GenuineIntel 15 2") CPU_ARCH=pentium4;;
		"GenuineIntel 15 4") CPU_ARCH=nocona;;
		"GenuineIntel 6 6") CPU_ARCH=pentium2;;
	esac
done
IFS=$OLD_IFS
unset OLD_IFS CPU_ID
COMMON=-pipe
if test -n "$CPU_ARCH"
then
	if want_nkhzp79chfabpqyh7e7pa8maf \
		"tune for $CPU_ARCH but still generate compatible code"
	then
		COMMON="$COMMON -mtune=$CPU_ARCH"
	else
		COMMON="$COMMON -march=$CPU_ARCH"
	fi
	unset CPU_ARCH
fi
if version_ge_nkhzp79chfabpqyh7e7pa8maf "$GCC_VERSION" 4.8.3
then
	# -fstack-protector is default and hurts performance.
	COMMON="$COMMON -fno-stack-protector"
fi
COMMON_WARNINGS="-Wall -Werror"
T=-fno-builtin-vprintf
if
	# Problem:
	# gcc-4.1.2 makes autoconf-2.6.1 builtin test complain:
	# warning: conflicting types for built-in function 'vprintf'
	# With -Werror, this will also fail the autoconf test,
	# which is not acceptable.
	testcode_nkhzp79chfabpqyh7e7pa8maf \
		$COMMON_WARNINGS "?$T" \
		'#undef vprintf' \
		'#ifdef __cplusplus' \
		'extern "C"' \
		'#endif' \
		'char vprintf();' \
		'int main() { return vprintf(); return 0; }'
then
	COMMON_WARNINGS="$COMMON_WARNINGS $T"
fi
COMMON_WARNINGS="$COMMON_WARNINGS -W -pedantic -Wimplicit -Wreturn-type"
COMMON_WARNINGS="$COMMON_WARNINGS -Wunused -Wpointer-arith -Wundef"
COMMON_WARNINGS="$COMMON_WARNINGS -Wwrite-strings -Wno-multichar"
if
	# Problem:
	# gcc-4.1.2 on AMD64 complains:
	# "warning: passing argument 1 of 'f' with different width due
	# to prototype", i. e. and "int" will no longer be converted
	# to a "size_t" without warnings! We do not like that at all.
	testcode_nkhzp79chfabpqyh7e7pa8maf \
		$COMMON_WARNINGS -Wconversion \
		'#include <stddef.h>' \
		'extern void f(size_t);' \
		'void g(void){f(0);}'
then
	COMMON_WARNINGS="$COMMON_WARNINGS -Wconversion"
fi
T=-Wno-missing-field-initializers
if
	# Problem:
	# gcc-4.8.3 on AMD64 complains if not all struct members are
	# assigned values in a struct initialization.
	# But I *love* setting all struct fields to zero that way!
	#
	# For some reasons which are beyond me, this warning is not
	# generated when generating an object file; only when also linking.
	# Therefore disabling the option unless this gives an error.
	testcode_nkhzp79chfabpqyh7e7pa8maf \
		$COMMON_WARNINGS "$T" \
		'typedef struct {int c1, c2; } s;' \
		'extern void f(s *p);' \
		'void g(void){s o= {0}; f(&o);}'
then
	COMMON_WARNINGS="$COMMON_WARNINGS $T"
fi
COMMON_WARNINGS="$COMMON_WARNINGS -Wredundant-decls"
if version_ge_nkhzp79chfabpqyh7e7pa8maf "$GCC_VERSION" 3.4.5
then
	COMMON_WARNINGS="$COMMON_WARNINGS -Winit-self -Wextra"
fi
COMMON_WARNINGS="$COMMON_WARNINGS -Wno-parentheses -Wno-uninitialized"

CXX_WARNINGS="-Wcast-qual"

C_WARNINGS="-Wdeclaration-after-statement"

if want_nkhzp79chfabpqyh7e7pa8maf "source-level debugging"
then
	# There are reports that GCC may generate invalid code for -O0.
	# However, I want to see this before I believe it!
	CFLAGS="$COMMON -O0 -fno-omit-frame-pointer -fstack-check"
	# Use the most expressive debugging format compatible with GDB.
	# The "3" means to include C preprocessor macros if possible.
	CFLAGS="$CFLAGS -ggdb3"
	# Omit unreferenced symbols in the debugging information.
	# This greatly reduces the amount of symbols in the symbol table
	# and also omits lots of uninteresting internal symbols for
	# GDB commands like "info variables".
	CPPFLAGS=
	CFLAGS="$CFLAGS -feliminate-unused-debug-symbols"
	LDFLAGS=
else
	CPPFLAGS=-DNDEBUG
	CFLAGS="$COMMON -O3 -fomit-frame-pointer -fno-stack-check"
	LDFLAGS=-s
fi
if version_ge_nkhzp79chfabpqyh7e7pa8maf "$GCC_VERSION" 4.0.0
then
	LDFLAGS="$LDFLAGS${LDFLAGS:+ }-Wl,-O1,--as-needed,--hash-style=gnu"
fi
if want_nkhzp79chfabpqyh7e7pa8maf "maximum warnings"
then
	CFLAGS="$CFLAGS $COMMON_WARNINGS"
	CXXFLAGS="$CFLAGS $CXX_WARNINGS"
	CFLAGS="$CFLAGS $C_WARNINGS"
else
	CXXFLAGS="$CFLAGS"
fi
if test $# -gt 0 && want_nkhzp79chfabpqyh7e7pa8maf "add flags '$@'"
then
	CXXFLAGS="$CXXFLAGS $@"
	CFLAGS="$CFLAGS $@"
fi
if
	want_nkhzp79chfabpqyh7e7pa8maf \
		"separate CPPFLAGS/LDFLAGS and CFLAGS/CXXFLAGS"
then
	MERGE_CFLAGS=
else
	MERGE_CFLAGS=Y
fi
unset -f want_nkhzp79chfabpqyh7e7pa8maf die_nkhzp79chfabpqyh7e7pa8maf \
	version_ge_nkhzp79chfabpqyh7e7pa8maf \
	testcode_nkhzp79chfabpqyh7e7pa8maf

export CFLAGS CXXFLAGS

if test -n "$MERGE_CFLAGS"
then
	echo "CFLAGS=\"$CPPFLAGS${CFLAGS:+ }$CFLAGS${LDFLAGS:+ }$LDFLAGS\""
	printf '%s%s\n' "CXXFLAGS=\"$CPPFLAGS${CXXFLAGS:+ }$CXXFLAGS" \
		"${LDFLAGS:+ }$LDFLAGS\""
else
	echo "CPPFLAGS=\"$CPPFLAGS\""
	echo "CFLAGS=\"$CFLAGS\""
	echo "CXXFLAGS=\"$CXXFLAGS\""
	echo "LDFLAGS=\"$LDFLAGS\""
fi
unset HAVE_SFL COMMON COMMON_WARNINGS C_WARNINGS CXX_WARNINGS T
test -f setflags.local && HAVE_SFL=1
test "$HAVE_SFL" || echo "#!/bin/false" > setflags.local
echo "# Settings from `date`:" >> setflags.local
if test -n "$MERGE_CFLAGS"
then
	echo "CFLAGS=\"$CPPFLAGS${CFLAGS:+ }$CFLAGS${LDFLAGS:+ }$LDFLAGS\""
	printf '%s%s\n' "CXXFLAGS=\"$CPPFLAGS${CXXFLAGS:+ }$CXXFLAGS" \
		"${LDFLAGS:+ }$LDFLAGS\""
	echo "export CFLAGS CXXFLAGS"
	echo "unset CPPFLAGS LDFLAGS"
else
	echo "CPPFLAGS=\"$CPPFLAGS\""
	echo "CFLAGS=\"$CFLAGS\""
	echo "CXXFLAGS=\"$CXXFLAGS\""
	echo "LDFLAGS=\"$LDFLAGS\""
	echo "export CPPFLAGS CFLAGS CXXFLAGS LDFLAGS"
fi >> setflags.local
unset HAVE_SFL MERGE_CFLAGS
